// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package dbsqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, name, status)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	ID     int64
	Name   string
	Status sql.NullBool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Name, arg.Status)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE name=$1
`

func (q *Queries) DeleteUser(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, name)
	return err
}

const getFalseUsers = `-- name: GetFalseUsers :many
SELECT id, name, status FROM users
WHERE status = false
`

func (q *Queries) GetFalseUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getFalseUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, status FROM users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Status)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, status FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lastId = `-- name: LastId :one
SELECT id FROM users ORDER BY ID DESC LIMIT 1
`

func (q *Queries) LastId(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, lastId)
	var id int64
	err := row.Scan(&id)
	return id, err
}
